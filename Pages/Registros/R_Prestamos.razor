@page "/prestamos"
@page "/prestamos/{PrestamosId:int}"

@inject PrestamosBLL prestamosBLL
@inject NotificationService notificationService


<EditForm Model="prestamos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="card">
        <div class="card-header">

            <h3>RegistroPrestamos</h3>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
        </div>
        <div class="card-body">

            @*PrestamoId*@
            <div class="form-r ow align-items-center">
                <div class="col">
                    <div class="form-group">
                        <label>PrestamosaId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="prestamos.PrestamosId" class="form-control col-4" />
                            <div class="input-group-append">
                                <div class="input-group-append">
                                    <button type="button" class="bi bi-search btn btn-primary input-group-text"
                                            @onclick="Buscar">
                                        Buscar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                     @*Fecha*@
                <div class="input-group">
                    <span class="input-group-text">Fecha de inicio</span>
                    <input type="date" @bind-value="prestamos.Fecha" />
                </div>
                <ValidationMessage For="@(() => prestamos.Fecha)" />

                
                    @*vecimiento*@
                <div class="form-group">
                    <label>  fecha Vencimiento en dias </label>
                    <InputNumber @bind-Value="prestamos.Vence" class="form-control" />
                   <ValidationMessage For="@(() => prestamos.Vence)" />   
                </div>

                 


                @*Concepto*@
                <div class="form-group">
                    <label>Conceptos</label>
                    <InputText @bind-Value="prestamos.Concepto" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Concepto)" />
                </div>

                @*Monto*@
                <div class="form-group">
                    <label>Monto</label>
                    <InputNumber @bind-Value="prestamos.Monto" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Monto)" />
                </div>



                @*PersonaID*@
                
                        <div class="col-md-4">
                        <label class="form-label">PersonaId</label>
                        <InputSelect class="form-select" @bind-Value="prestamos.PersonaId">
                            <option value="0" disabled> Seleccione un nombre registrado </option>
                            @foreach (Personas personas in lista)
                            {
                                <option value="@personas.PersonaId">@personas.Nombre</option>
                            }
                        </InputSelect>
                    </div>
    


            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="bi bi-file-earmark-plus btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                    <button type="submit" class="bi bi-save btn btn-lg btn-success">Guardar</button>
                    
                    <button type="button" class=" bi bi-trash3 btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>



@code {
    [Parameter]

    public int PrestamosId { get; set; }
    public Personas persona { get; set; } = new Personas();
    public Prestamos prestamos { get; set; } = new Prestamos();

    public List<Personas> lista = new List<Personas>();
    public int PersonaId { get; set; }

    public string Filtro { get; set; } = "";
    public string Criterio { get; set; } = "";

    protected async override Task  OnInitializedAsync()
    {
        if (PrestamosId > 0)
        {
            this.prestamos.PrestamosId = PrestamosId;
            await this.Buscar();
        }

        lista = await prestamosBLL.GetPersonas(c => true);
    }

    public void Nuevo()
    {
        prestamos = new Prestamos();
    }

    public async Task Guardar()
    {

        bool guardo = await prestamosBLL.Guardar2(prestamos);

        if (guardo)
        {

            ShowNotification(
            new NotificationMessage
                {

                    Severity = NotificationSeverity.Success,
                    Summary = "Se guardo Correcto"


                });

            Nuevo();
        }
    }
    private async Task  Buscar()
    {
        if (prestamos.PrestamosId > 0 || prestamos.PersonaId > 0)
        {
            var encontrado = await prestamosBLL.Buscar2(prestamos.PrestamosId);

            if (encontrado != null)
                this.prestamos = encontrado;
        }
    }

    public async Task Eliminar()
    {
        bool elimino;

        elimino = await prestamosBLL.Eliminar2(prestamos);

        if (elimino)
        {

            ShowNotification(
            new NotificationMessage
                {

                    Severity = NotificationSeverity.Success,
                    Summary = "Se elimino Correctamente "


                });

            Nuevo();
        }
    }

    void ShowNotification(NotificationMessage message)
    {

        notificationService.Notify(message);
    }



    public async Task Editar()
    {

        var editar = await prestamosBLL.Editar(prestamos);

    }

}
