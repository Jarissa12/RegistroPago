@page "/Pago"
@page "/Pago/{PagoId:int}"

@inject PagoBLL pagoBLL
@inject NotificationService notificationService
@inject PersonasBLL personasBLL
@inject PrestamosBLL prestamoBLL

<EditForm Model="pago" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <h3>Registro de Pagos</h3>

        </div>
        <div class="card-body">
            @*Pagos*@
            <div class="form-row align-items-center">
                <div class="col">
                    <div class="form-group">
                        <label>PagoId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="pago.PagoId" class="form-control col-4" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text"
                                        @onclick="Buscar">
                                    <i class="oi oi-magnifying-glass" /> Buscar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            @*Fecha*@
            <div class="mb-3">
                <label>Fecha</label>
                <InputDate class="form-control" @bind-Value="pago.Fecha" />
                <ValidationMessage For="@(() => pago.Fecha)" />
            </div>

            <div class="mb-3 col">
                <label>PersonaId</label>
                <InputSelect class="form-select" @bind-Value="pago.PersonaId">
                    @foreach (Personas persona in listPersonas)
                    {
                        <option value="@persona.PersonaId"> @persona.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>pago.PersonaId)" />
            </div>

            @*Concepto*@
            <div class="mb-3">
                <label>Concepto</label>
                <InputText class="form-control" @bind-Value="pago.Concepto" />
                <ValidationMessage For="@(()=> pago.Concepto )" />
            </div>

            @*Monto*@
            <div class="mb-3">
                <label>Monto</label>
                <InputNumber class="form-control" @bind-Value="pago.Monto" />
                <ValidationMessage For="@(() => pago.Monto)" />
            </div>

            @*PAGOS para el DETALLE*@
            <div class="card-body">
                <fieldset class="border-success">
                    <h3>Detalles de Pagos</h3>
                    <div class="row"> </div>
                </fieldset>

                @*DetalleId*@

                <div class="form-row align-items-center">
                    <div class="form-group ">
                        <label>Id</label>
                        <InputNumber  @bind-Value="detalle.Id" class="form-control col 4" ></InputNumber>
                        <div class="input-group-append">
                            <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                <i class="oi oi-magnifying-glass" /> Buscar
                            </button>
                        </div>
                    </div>
                </div>

                

                @*PagoId *@
                <div class="col-2">
                    <label>Pago Id:</label>
                    <InputSelect class="form-select" @bind-Value="detalle.PagoId">
                        @foreach (Pagos pago in listPago)
                        {
                            <option value="@pago.PagoId"> Id:@pago.PagoId </option>
                        }

                    </InputSelect>
                </div>

                @*PrestamoId *@
                <div class="col-2">
                    <label>Prestamo Id:</label>
                    <InputSelect class="form-select" @bind-Value="detalle.PrestamoId">
                        @foreach (Prestamos prestamos in listPrestamos)
                        {
                            <option value="@prestamos.PrestamosId"> Id:@prestamos.PrestamosId</option>
                        }

                    </InputSelect>
                </div>

                @*ValorPagado *@
                <div class="col-2">
                    <label>Valor Pagado</label>
                    <InputNumber class="form-control" @bind-Value="detalle.ValorPagado"></InputNumber>
                    <ValidationMessage For="@(() => detalle.ValorPagado)"></ValidationMessage>
                </div>

                @*Boton para agregar *@
                <div class="col-2">
                    <br>
                    <button type="button" class="btn btn-primary input-group-text" @onclick="AgregarDetalle">
                        <span class="oi oi-plus">Agregar</span>
                    </button>
                </div>

                

            </div>

            @* Tabla para los detalles *@
            <table class="table table-bordered table-light">
                <thead class="thead">
                    <tr class="table">
                        <th>Id</th>
                        <th>PrestamoId</th>
                        <th>PagoId</th>
                        <th>ValorPagado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in pago.Detalle)
                        {

                            if (item == pago.Detalle.ElementAt(0))
                            {
                                pago.Monto = 0;
                            }
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.PrestamoId</td>
                                <td>@item.PagoId</td>
                                <td>@item.ValorPagado</td> 
                            </tr>

                            pago.Monto += item.ValorPagado;
                        }
                </tbody>
            </table>


            <div class="row justify-content-between">
                    <div class="col-4">
                        <label>Monto Total</label>
                        <div class="input-group mb-3">
                            <span class="form-control">@pago.Monto</span>
                        </div>
                    </div>
                </div>
        </div>
    </div>

    <div class="card-footer">
        <div class="mb-3 text-center" display: inline-block>
            <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                <i class="oi oi-file" /> Nuevo
            </button>
            <button type="submit" class="btn btn-lg btn-success">
                <i class="oi oi-document" /> Guardar
            </button>
            
            <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                <i class="oi oi-trash" /> Eliminar
            </button>
        </div>
    </div>

</EditForm>

@code{

    [Parameter]
    public int PagoId { get; set; }

    public Pagos pago { get; set; } = new Pagos();
    public PagosDetalle detalle { get; set; } = new PagosDetalle();
    public List<Pagos> listPago { get; set; } = new List<Pagos>();
    public List<Personas> listPersonas { get; set; } = new List<Personas>();
    public List<Prestamos> listPrestamos { get; set; } = new List<Prestamos>();


    protected  async override Task  OnInitializedAsync()
    {
        if (PagoId > 0)
        {

            this.pago.PagoId = PagoId;
            await this.Buscar();
        }
        pago.Fecha = DateTime.Now;
        
        listPersonas = await  personasBLL.GetPersonas(o => true);
        listPago = await  pagoBLL.GetPagos(o => true);
        listPrestamos = await prestamoBLL.GetPrestamos(o => true);
    }
    public  async Task AgregarDetalle()
    {
        if (pago.PersonaId > 0)
        {
             pago.Detalle.Add(detalle);
            detalle = new PagosDetalle();
        }
    }


     // hacer cargar 

     //public void cargar {

      //  listPrestamos = prestamoBLL.getList (p=> p.PersonaId == pago.PersonaId &&  p.balance>0)
     //}
    private async Task  Buscar()
    {
        if (pago.PagoId > 0)
        {
            var encontrado = await pagoBLL.Buscar4(pago.PagoId);

            if (encontrado != null)
                this.pago = encontrado;

        }
    }
    

   


    bool Validar()
    {
        return true;
    }

    public void  Nuevo()
    {
        pago = new Pagos();
    }

    public async Task  Guardar()
    {
        bool guardo;

        if (!Validar())
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error Revise los campos "
                });
            return;
        }


        guardo = await pagoBLL.Guardar4(pago);

        if (guardo)
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado correctamente"
                });

            Nuevo();

        }

    }
    public async Task  Eliminar()
    {
        bool elimino;

        elimino = await pagoBLL.Eliminar4(pago);

        if (elimino)
        {
            ShowNotification(
           new NotificationMessage
               {
                   Severity = NotificationSeverity.Error,
                   Summary = "Eliminado"
               });

            Nuevo();

        }
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }

}